<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adrian Astley</title>
    <link>https://adrianastley.com/</link>
    <description>Recent content on Adrian Astley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Oct 2016 13:11:37 -0500</lastBuildDate>
    <atom:link href="https://adrianastley.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>lantern</title>
      <link>https://adrianastley.com/projects/lantern/</link>
      <pubDate>Fri, 21 Oct 2016 13:11:37 -0500</pubDate>
      
      <guid>https://adrianastley.com/projects/lantern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Engine Skeleton Gains Some Tendons - Part 2</title>
      <link>https://adrianastley.com/blog/the_engine_skeleton_gains_some_tendons_part_2/</link>
      <pubDate>Wed, 17 Jul 2013 16:21:00 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/the_engine_skeleton_gains_some_tendons_part_2/</guid>
      <description>&lt;p&gt;Part 2!! As a recap from last post, I started out last week by implementing image handling, video handling, and a text debug console.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I started with the console as it allows me to to map typed commands to functions. (IE. &amp;lsquo;loadimage zassets/castle/cae4d311.tga&amp;rsquo; calls loadImageToScreen() on that file) This is extremely useful in that I can load an image multiple times or I can load different images all without having to re-run the engine or recompile.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Creating the text console was actually extremely easy because it was already written. I just to inherit from the base class:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Console&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;GUI&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;Debugger&lt;/span&gt;&amp;nbsp;{
&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;Console&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*engine);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;virtual&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#850000;&#34;&gt;Console&lt;/span&gt;()&amp;nbsp;{}
 
&lt;span style=&#34;color:blue;&#34;&gt;private&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*_engine;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;cmdLoadImage&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;int&lt;/span&gt;&amp;nbsp;argc,&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;&amp;nbsp;**argv);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;cmdLoadVideo&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;int&lt;/span&gt;&amp;nbsp;argc,&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;&amp;nbsp;**argv);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;cmdLoadSound&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;int&lt;/span&gt;&amp;nbsp;argc,&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;&amp;nbsp;**argv);
};&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the constructor, I just registered the various commands:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;Console&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;Console&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*engine)&amp;nbsp;:&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;GUI&lt;/span&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;Deb&lt;/span&gt;ugger(),&amp;nbsp;_engine(engine)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;registerCmd&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;loadimage&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#6f008a;&#34;&gt;WRAP_METHOD&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Console&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;cmdLoadImage&lt;/span&gt;));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;registerCmd&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;loadvideo&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#6f008a;&#34;&gt;WRAP_METHOD&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Console&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;cmdLoadVideo&lt;/span&gt;));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;registerCmd&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;loadsound&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#6f008a;&#34;&gt;WRAP_METHOD&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Console&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;cmdLoadSound&lt;/span&gt;));
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And then, in ZEngine::initialize() I created an instance of my custom class:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;initialize&lt;/span&gt;()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_console&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Console&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;this&lt;/span&gt;);
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And lastly, I registered a key press combination to bring up the debug console:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;processEvents&lt;/span&gt;()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;while&lt;/span&gt;&amp;nbsp;(_eventMan-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;pollEvent&lt;/span&gt;(_event))&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;switch&lt;/span&gt;&amp;nbsp;(_event.type)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;EVENT_KEYDOWN&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;switch&lt;/span&gt;&amp;nbsp;(_event.kbd.keycode)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;KEYCODE_d&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(_event.kbd.&lt;span style=&#34;color:#850000;&#34;&gt;hasFlags&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;KBD_CTRL&lt;/span&gt;))&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Start&amp;nbsp;the&amp;nbsp;debugger&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_console-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;attach&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_console-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;onFrame&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;break&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;break&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With that done, I can press ctrl+d, and this is what pops up:&lt;/p&gt;


&lt;a class=&#39;fancybox
		
			fancybox-medium
		 
		&#39; href=&#34;https://adrianastley.com/static/images/blog/the_engine_skeleton_gains_some_tendons_part_2/console.png&#34;&gt;
	&lt;img src=&#34;https://adrianastley.com/static/images/blog/the_engine_skeleton_gains_some_tendons_part_2/console.png&#34; alt=&#34;Console&#34; /&gt;
&lt;/a&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;asdf&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Engine Skeleton Gains Some Tendons - Part 1</title>
      <link>https://adrianastley.com/blog/the_engine_skeleton_gains_some_tendons_part_1/</link>
      <pubDate>Thu, 11 Jul 2013 01:27:00 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/the_engine_skeleton_gains_some_tendons_part_1/</guid>
      <description>

&lt;p&gt;Being a little tired of the script system, I started last week by adding image handling, video handling and a text debug console to the engine. With that done, I tried piecing together how the script system worked as a whole. After a long talk with Fuzzie, we figured out the majority of the system worked and I&amp;rsquo;ve spent the beginning of this week putting it into code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with the script system since it&amp;rsquo;s fresh in my mind. Rather than try to explain what I learned, I&amp;rsquo;ll just explain my current understanding of the system and it&amp;rsquo;s behavior.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The system is governed by five main containers:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;gt;&amp;nbsp;_globalState;
&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;ActionNode&lt;/span&gt;&amp;nbsp;*&amp;gt;&amp;nbsp;_activeNodes;
&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;nbsp;*&amp;gt;&amp;gt;&amp;nbsp;_referenceTable;
&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;Stack&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;nbsp;*&amp;gt;&amp;nbsp;_puzzlesToCheck;
&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;gt;&amp;nbsp;_activePuzzles;
&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Control&lt;/span&gt;&amp;gt;&amp;nbsp;_activeControls;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;globalState&lt;/em&gt; holds the state of the entire game. Each key is a hash that can represent anything from a timer to whether a certain puzzle has been solved. The value depends on the what the key is, however, the vast majority are boolean states (0 or 1).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;activeNodes&lt;/em&gt; holds&amp;hellip; wait for it&amp;hellip; the active ActionNodes. Imagine that! Nodes are anything that needs to be processed over time. For example, a timer, an animation, etc. I&amp;rsquo;ll explain further later in the post.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;referenceTable&lt;/em&gt; stores references to the Puzzles that certain globalState keys have. This can be thought of as a reverse of the Puzzle struct. A Puzzle stores a list of globalState keys to be checked. _referenceTable stores which Puzzles reference certain globalState keys. Why would we want to do this? It means that any puzzles loaded into the _&lt;em&gt;reference&lt;/em&gt; table only have to be checked once, instead of every frame. When a value in _&lt;em&gt;globalState&lt;/em&gt; is changed, it adds the referenced Puzzle to _&lt;em&gt;puzzlesToCheck&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;puzzlesToCheck&lt;/em&gt; holds the Puzzles whose Criteria we want to check against _&lt;em&gt;globalState&lt;/em&gt;. This stack is exhausted every frame. It is filled either by _referenceTable or when we enter a new room.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;activePuzzles&lt;/em&gt; is where the room&amp;rsquo;s Puzzles are stored. The Puzzle pointers in _&lt;em&gt;referenceTable&lt;/em&gt; and _&lt;em&gt;puzzlesToCheck&lt;/em&gt; point to here.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I realize that the descriptions are still a bit vague, so I figured I would go through an example of sorts and how the containers behave.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;every-time-we-change-rooms&#34;&gt;Every time we change rooms&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Clear _&lt;em&gt;referenceTable&lt;/em&gt;, _&lt;em&gt;puzzlesToCheck&lt;/em&gt;, and _&lt;em&gt;activePuzzles&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Open and parse the corresponding .scr file into Puzzle structs and store them in _&lt;em&gt;activePuzzles&lt;/em&gt;. (See last three blog posts)&lt;/li&gt;
&lt;li&gt;Iterate through all the Puzzles and their Criteria and create references from a globalState key to the Puzzle. (See createReferenceTable below)&lt;/li&gt;
&lt;li&gt;Add all Puzzles to _&lt;em&gt;puzzlesToCheck&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ScriptManager&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;createReferenceTable&lt;/span&gt;()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Iterate&amp;nbsp;through&amp;nbsp;each&amp;nbsp;Puzzle&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;iterator&lt;/span&gt;&amp;nbsp;activePuzzleIter&amp;nbsp;=&amp;nbsp;_activePuzzles.&lt;span style=&#34;color:#850000;&#34;&gt;begin&lt;/span&gt;();&amp;nbsp;activePuzzleIter&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;!=&lt;/span&gt;&amp;nbsp;_activePuzzles.&lt;span style=&#34;color:#850000;&#34;&gt;end&lt;/span&gt;();&amp;nbsp;activePuzzleIter&lt;span style=&#34;color:teal;&#34;&gt;++&lt;/span&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;nbsp;*puzzlePtr&amp;nbsp;=&amp;nbsp;&amp;amp;(&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;activePuzzleIter);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Iterate&amp;nbsp;through&amp;nbsp;each&amp;nbsp;Criteria&amp;nbsp;and&amp;nbsp;add&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;from&amp;nbsp;the&amp;nbsp;criteria&amp;nbsp;key&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Puzzle&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Criteria&lt;/span&gt;&amp;gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;iterator&lt;/span&gt;&amp;nbsp;criteriaIter&amp;nbsp;=&amp;nbsp;activePuzzleIter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;criteriaList.&lt;span style=&#34;color:#850000;&#34;&gt;begin&lt;/span&gt;();&amp;nbsp;criteriaIter&amp;nbsp;!=&amp;nbsp;(&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;activePuzzleIter).criteriaList.&lt;span style=&#34;color:#850000;&#34;&gt;end&lt;/span&gt;();&amp;nbsp;criteriaIter&lt;span style=&#34;color:teal;&#34;&gt;++&lt;/span&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_referenceTable&lt;span style=&#34;color:teal;&#34;&gt;[&lt;/span&gt;criteriaIter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;key&lt;span style=&#34;color:teal;&#34;&gt;]&lt;/span&gt;.push_back(puzzlePtr);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;If&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;is&amp;nbsp;a&amp;nbsp;key,&amp;nbsp;add&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;it&amp;nbsp;as&amp;nbsp;well&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(criteriaIter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;argument)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_referenceTable&lt;span style=&#34;color:teal;&#34;&gt;[&lt;/span&gt;criteriaIter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;argument&lt;span style=&#34;color:teal;&#34;&gt;]&lt;/span&gt;.push_back(puzzlePtr);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Remove&amp;nbsp;duplicate&amp;nbsp;entries&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;nbsp;*&amp;gt;&amp;gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;iterator&lt;/span&gt;&amp;nbsp;referenceTableIter;&amp;nbsp;referenceTableIter&amp;nbsp;!=&amp;nbsp;_referenceTable.&lt;span style=&#34;color:#850000;&#34;&gt;end&lt;/span&gt;();&amp;nbsp;referenceTableIter&lt;span style=&#34;color:teal;&#34;&gt;++&lt;/span&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;removeDuplicateEntries&lt;/span&gt;(&amp;amp;(referenceTableIter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;_value));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;every-frame&#34;&gt;Every frame&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Iterate through each ActionNode in __activeNodes_ and call _process()_ on them&lt;/li&gt;
&lt;li&gt;If _process()_ returns true, remove and delete the ActionNode
&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ScriptManager&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;updateNodes&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;deltaTimeMillis)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;If&amp;nbsp;process()&amp;nbsp;returns&amp;nbsp;true,&amp;nbsp;it&amp;nbsp;means&amp;nbsp;the&amp;nbsp;node&amp;nbsp;can&amp;nbsp;be&amp;nbsp;deleted&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;ActionNode&lt;/span&gt;&amp;nbsp;*&amp;gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;iterator&lt;/span&gt;&amp;nbsp;iter&amp;nbsp;=&amp;nbsp;_activeNodes.&lt;span style=&#34;color:#850000;&#34;&gt;begin&lt;/span&gt;();&amp;nbsp;iter&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;!=&lt;/span&gt;&amp;nbsp;_activeNodes.&lt;span style=&#34;color:#850000;&#34;&gt;end&lt;/span&gt;();)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;((&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;iter)-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;process&lt;/span&gt;(_engine,&amp;nbsp;deltaTimeMillis))&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Remove&amp;nbsp;the&amp;nbsp;node&amp;nbsp;from&amp;nbsp;_activeNodes,&amp;nbsp;then&amp;nbsp;delete&amp;nbsp;it&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ActionNode&lt;/span&gt;&amp;nbsp;*node&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;iter;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iter&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;=&lt;/span&gt;&amp;nbsp;_activeNodes.&lt;span style=&#34;color:#850000;&#34;&gt;erase&lt;/span&gt;(iter);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;delete&lt;/span&gt;&amp;nbsp;node;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;else&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iter&lt;span style=&#34;color:teal;&#34;&gt;++&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}
&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;NodeTimer&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;process&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*engine,&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;deltaTimeInMillis)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_timeLeft&amp;nbsp;-=&amp;nbsp;deltaTimeInMillis;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(_timeLeft&amp;nbsp;&amp;lt;=&amp;nbsp;0)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;engine-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;getScriptManager&lt;/span&gt;()-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;setStateValue&lt;/span&gt;(_key,&amp;nbsp;0);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;true&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;false&lt;/span&gt;;
}&lt;/pre&gt;

&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;While __puzzlesToCheck_ is not empty, pop a Puzzle off the stack and check its Criteria against __globalState_&lt;/li&gt;
&lt;li&gt;If any of the Criteria pass, call _execute()_ on the corresponding ResultAction.
    &lt;ul&gt;&lt;li&gt;Some ResultAction&#39;s might create ActionNode&#39;s and add them to __activeNodes_. IE ActionTimer&lt;/li&gt;&lt;/ul&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ScriptManager&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;checkPuzzleCriteria&lt;/span&gt;()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;while&lt;/span&gt;&amp;nbsp;(!_puzzlesToCheck.&lt;span style=&#34;color:#850000;&#34;&gt;empty&lt;/span&gt;())&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;nbsp;*puzzle&amp;nbsp;=&amp;nbsp;_puzzlesToCheck.&lt;span style=&#34;color:#850000;&#34;&gt;pop&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Check&amp;nbsp;each&amp;nbsp;Criteria&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Criteria&lt;/span&gt;&amp;gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;iterator&lt;/span&gt;&amp;nbsp;iter&amp;nbsp;=&amp;nbsp;puzzle-&amp;gt;criteriaList.&lt;span style=&#34;color:#850000;&#34;&gt;begin&lt;/span&gt;();&amp;nbsp;iter&amp;nbsp;!=&amp;nbsp;puzzle-&amp;gt;criteriaList.&lt;span style=&#34;color:#850000;&#34;&gt;end&lt;/span&gt;();&amp;nbsp;iter&lt;span style=&#34;color:teal;&#34;&gt;++&lt;/span&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;criteriaMet&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;false&lt;/span&gt;;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Get&amp;nbsp;the&amp;nbsp;value&amp;nbsp;to&amp;nbsp;compare&amp;nbsp;against&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;argumentValue;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;((&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;iter).argument)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;argumentValue&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getStateValue&lt;/span&gt;(iter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;argument);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;argumentValue&amp;nbsp;=&amp;nbsp;iter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;argument;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Do&amp;nbsp;the&amp;nbsp;comparison&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;switch&lt;/span&gt;&amp;nbsp;((&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;iter).criteriaOperator)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;EQUAL_TO&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;criteriaMet&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getStateValue&lt;/span&gt;(iter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;key)&amp;nbsp;==&amp;nbsp;argumentValue;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;break&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;NOT_EQUAL_TO&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;criteriaMet&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getStateValue&lt;/span&gt;(iter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;key)&amp;nbsp;!=&amp;nbsp;argumentValue;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;break&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;GREATER_THAN&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;criteriaMet&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getStateValue&lt;/span&gt;(iter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;key)&amp;nbsp;&amp;gt;&amp;nbsp;argumentValue;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;break&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;LESS_THAN&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;criteriaMet&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getStateValue&lt;/span&gt;(iter&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;key)&amp;nbsp;&amp;lt;&amp;nbsp;argumentValue;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;break&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;TODO:&amp;nbsp;Add&amp;nbsp;logic&amp;nbsp;for&amp;nbsp;the&amp;nbsp;different&amp;nbsp;Flags&amp;nbsp;(aka,&amp;nbsp;ONCE_PER_INST)&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(criteriaMet)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;ResultAction&lt;/span&gt;&amp;nbsp;*&amp;gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;iterator&lt;/span&gt;&amp;nbsp;resultIter&amp;nbsp;=&amp;nbsp;puzzle-&amp;gt;resultActions.&lt;span style=&#34;color:#850000;&#34;&gt;begin&lt;/span&gt;();&amp;nbsp;resultIter&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;!=&lt;/span&gt;&amp;nbsp;puzzle-&amp;gt;resultActions.&lt;span style=&#34;color:#850000;&#34;&gt;end&lt;/span&gt;();&amp;nbsp;resultIter&lt;span style=&#34;color:teal;&#34;&gt;++&lt;/span&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;resultIter)-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;execute&lt;/span&gt;(_engine);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}
&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ActionTimer&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*zEngine)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;zEngine-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;getScriptManager&lt;/span&gt;()-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;addActionNode&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;NodeTimer&lt;/span&gt;(_key,&amp;nbsp;_time));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;true&lt;/span&gt;;
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s the script system. I&amp;rsquo;ve tried to explain it in the best way possible, but if you guys have any questions or suggestions for my implementation, as always, feel free to comment.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Details on the image handling, video handling and the text debug console will be in Part 2, which should be up some time tomorrow. As always, thanks for reading.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!&amp;nbsp;&amp;nbsp;&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improving the &#39;Object&#39; Class and Using Classes for ResultActions</title>
      <link>https://adrianastley.com/blog/improving_the_object_class/</link>
      <pubDate>Mon, 01 Jul 2013 05:03:00 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/improving_the_object_class/</guid>
      <description>&lt;p&gt;Last week, I posted about using an &amp;lsquo;Object&amp;rsquo; class to encapsulate the variable-typed arguments for ResultActions. You guys posted some awesome feedback&lt;a href=&#34;#reference1&#34;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; and I used it to improve the class. First, I renamed the class to &amp;lsquo;SingleValueContainer&amp;rsquo; so users have a better sense of what it is. Second, following 
&lt;a class=&#39;fancybox
		 
		&#39; href=&#34;https://adrianastley.com/static/images/blog/improving_the_object_class/fuzzie_response.png&#34;&gt;
	Fuzzie&#39;s advice
&lt;/a&gt;, I put all the values except for String, directly in the union. It&amp;rsquo;s the same or less memory cost and results in less heap allocations.&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;union&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;boolVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;byteVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;int16&lt;/span&gt;&amp;nbsp;int16Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint16&lt;/span&gt;&amp;nbsp;uint16Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;int32&lt;/span&gt;&amp;nbsp;int32Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;uint32Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;float&lt;/span&gt;&amp;nbsp;floatVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;double&lt;/span&gt;&amp;nbsp;doubleVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;&amp;nbsp;*stringVal;
}&amp;nbsp;_value;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice that the stringVal isn&amp;rsquo;t actually a Common::String object, but rather a pointer to a char array. This saves a bit of memory at the cost of a couple strlen(), memcpy(), and String object assigment.&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;SingleValueContainer&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;SingleValueContainer&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;value)&amp;nbsp;:&amp;nbsp;_objectType(&lt;span style=&#34;color:#216f85;&#34;&gt;BYTE&lt;/span&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_value.stringVal&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;[value.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;memcpy&lt;/span&gt;(_value.stringVal,&amp;nbsp;value.&lt;span style=&#34;color:#850000;&#34;&gt;c_str&lt;/span&gt;(),&amp;nbsp;value.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1);
}
&lt;span style=&#34;color:#216f85;&#34;&gt;SingleValueContainer&lt;/span&gt;&amp;nbsp;&amp;amp;&lt;span style=&#34;color:#216f85;&#34;&gt;SingleValueContainer&lt;/span&gt;::&lt;span style=&#34;color:teal;&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:teal;&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;&amp;amp;rhs)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(_objectType&amp;nbsp;!=&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;STRING&lt;/span&gt;)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_objectType&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;STRING&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_value.stringVal&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;[rhs.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;memcpy&lt;/span&gt;(_value.stringVal,&amp;nbsp;rhs.&lt;span style=&#34;color:#850000;&#34;&gt;c_str&lt;/span&gt;(),&amp;nbsp;rhs.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;*&lt;span style=&#34;color:blue;&#34;&gt;this&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;length&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;strlen&lt;/span&gt;(_value.stringVal);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(length&amp;nbsp;&amp;lt;=&amp;nbsp;rhs.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;memcpy&lt;/span&gt;(_value.stringVal,&amp;nbsp;rhs.&lt;span style=&#34;color:#850000;&#34;&gt;c_str&lt;/span&gt;(),&amp;nbsp;rhs.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;else&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:blue;&#34;&gt;[]&lt;/span&gt;&amp;nbsp;_value.stringVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_value.stringVal&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;[rhs.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;memcpy&lt;/span&gt;(_value.stringVal,&amp;nbsp;rhs.&lt;span style=&#34;color:#850000;&#34;&gt;c_str&lt;/span&gt;(),&amp;nbsp;rhs.&lt;span style=&#34;color:#850000;&#34;&gt;size&lt;/span&gt;()&amp;nbsp;+&amp;nbsp;1);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;*&lt;span style=&#34;color:blue;&#34;&gt;this&lt;/span&gt;;
}
&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;SingleValueContainer&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;getStringValue&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;*returnValue)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(_objectType&amp;nbsp;!=&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;STRING&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;warning&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;&amp;#39;Object&amp;#39;&amp;nbsp;is&amp;nbsp;not&amp;nbsp;storing&amp;nbsp;a&amp;nbsp;Common::String.&amp;quot;&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*returnValue&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;=&lt;/span&gt;&amp;nbsp;_value.stringVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;true&lt;/span&gt;;
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With those changes the class seems quite solid. (The full source can be found &lt;a href=&#34;https://github.com/RichieSams/scummvm/blob/20f8e05cc3d1661ed5d5af9c9e1420cce36b6893/engines/zvision/utility/single_value_container.h&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/RichieSams/scummvm/blob/20f8e05cc3d1661ed5d5af9c9e1420cce36b6893/engines/zvision/utility/single_value_container.cpp&#34;&gt;here&lt;/a&gt;). However, after seeing 
&lt;a class=&#39;fancybox
		 
		&#39; href=&#34;https://adrianastley.com/static/images/blog/improving_the_object_class/zidane_sama_response.png&#34;&gt;
	Zidane Sama&#39;s comment
&lt;/a&gt;, I realized that there was a better way to tackle the problem than variant objects. Instead of trying to generalize the action types and arguments and storing them in structs, a better approach is to create a class for each action type with a common, &amp;ldquo;execute()&amp;rdquo; method that will be called by the scriptManager when the Criteria are met for an ResultAction.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I first created an interface base class that all the different types would inherit from:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ResultAction&lt;/span&gt;&amp;nbsp;{
&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;virtual&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#850000;&#34;&gt;ResultAction&lt;/span&gt;()&amp;nbsp;{}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;virtual&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*zEngine)&amp;nbsp;=&amp;nbsp;0;
};&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Next, I created the individual classes for each type of ResultAction:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ActionAdd&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ResultAction&lt;/span&gt;&amp;nbsp;{
&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;ActionAdd&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;line);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*zEngine);
 
&lt;span style=&#34;color:blue;&#34;&gt;private&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;_key;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;_value;
};&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The individual classes parse out any arguments in their constructor and store them in member variables. In execute(), they execute the logic pertaining to their action. A pointer to ZEngine is passed in order to give the method access to all the necessary tools (modifying graphics, scriptManager states, sounds, etc.)&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;ActionAdd&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;ActionAdd&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;line)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;sscanf&lt;/span&gt;(line.&lt;span style=&#34;color:#850000;&#34;&gt;c_str&lt;/span&gt;(),&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;:add(%u,%hhu)&amp;quot;&lt;/span&gt;,&amp;nbsp;&amp;amp;_key,&amp;nbsp;&amp;amp;_value);
}
 
&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ActionAdd&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;&amp;nbsp;*zEngine)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;zEngine-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;getScriptManager&lt;/span&gt;()-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;addToStateValue&lt;/span&gt;(_key,&amp;nbsp;_value);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;true&lt;/span&gt;;
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thus, in the script file parser I can just look for the action type and then pass create an action type, passing the constructor the whole line:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;while&lt;/span&gt;&amp;nbsp;(!line.&lt;span style=&#34;color:#850000;&#34;&gt;contains&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;))&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Parse&amp;nbsp;for&amp;nbsp;the&amp;nbsp;action&amp;nbsp;type&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(line.&lt;span style=&#34;color:#850000;&#34;&gt;matchString&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;*:add*&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;true&lt;/span&gt;))&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;actionList.&lt;span style=&#34;color:#850000;&#34;&gt;push_back&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ActionAdd&lt;/span&gt;(line));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(line.&lt;span style=&#34;color:#850000;&#34;&gt;matchString&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;*:animplay*&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;true&lt;/span&gt;))&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;actionList.&lt;span style=&#34;color:#850000;&#34;&gt;push_back&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;ActionAnimPlay&lt;/span&gt;(line));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(.....)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;While this means I have to create 20+ classes for all the different types of actions, I think this method nicely encapsulates and abstracts both the parsing and the action of the result. I&amp;rsquo;m a bit sad that I&amp;rsquo;m not going to be using the &amp;lsquo;SingleValueContainer&amp;rsquo; class, but if nothing else, I learned quite a bit while creating it. Plus, I won&amp;rsquo;t be getting rid of it, so it might have a use somewhere else.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This coming week I need to finish creating all the classes and then try to finish the rest of the engine skeleton. As always, feel free to comment / ask questions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!&amp;nbsp;&amp;nbsp;&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[1]&lt;/strong&gt;: &lt;a name=&#34;reference1&#34;&gt;&lt;/a&gt;My original blog was on Blogger. I have since migrated all the content here, except the comments. You&amp;rsquo;ll just have to take my word for it that the comments were useful. :P&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing a Generic Single Value Container in C&#43;&#43;</title>
      <link>https://adrianastley.com/blog/implementing_a_single_value_container_in_cpp/</link>
      <pubDate>Wed, 26 Jun 2013 10:19:00 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/implementing_a_single_value_container_in_cpp/</guid>
      <description>

&lt;p&gt;In my previous post I explained the format of the script system for ZEngine. Each Puzzle has a Results section which essentially stores function names and their arguments:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;
results {
    action:assign(5985, 0)
    background:timer:7336(60)
    event:change_location(C,B,C0,1073)
    background:music:5252(1 a000h1tc.raw 1)    
}
&lt;/pre&gt;

&lt;p&gt;I wanted to be able to store each action inside a struct, and then have a linked list of all the structs. However, the problem is that both the number of arguments and the size of the arguments are variable. Marisa Chan&amp;rsquo;s solution was to store all the arguments in a space delimited char array. IE:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;&amp;nbsp;arguments[25]&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;1&amp;nbsp;a00h1tc.raw&amp;nbsp;1&amp;quot;&lt;/span&gt;;
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Simple, but not without it&amp;rsquo;s problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The size is fixed, since the char array is in a struct. In order to make sure we never overflow, we have to allocate a fairly large array. That said, in this particular case, each &amp;lsquo;large&amp;rsquo; array in this case would only be ~30 bytes per struct.&lt;/li&gt;
&lt;li&gt;By storing everything as strings, we put off parsing till the action function is actually called. At first glace, this doesn&amp;rsquo;t seem too bad, since the data will have to be parsed anyway. However, this method forces it to be parsed at every call to that action function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another option was to have everything stored in a linked list of void pointers. However, I don&amp;rsquo;t think I need to convince anyone that void pointers are just gross and using them would be just asking for problems.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;What I really wanted was a typed way to store a variably typed (and sized) value. Therefore I created what I&amp;rsquo;m calling the &amp;ldquo;Object&amp;rdquo; class. (I&amp;rsquo;m up for suggestions for a better name)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The heart of the class is a union that stores a variety of pointers to different types and an enum that defines what type is being stored:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Object&lt;/span&gt;&amp;nbsp;{
&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;enum&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ObjectType&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;BOOL&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;BYTE&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;INT16&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;UINT16&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;INT32&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;UINT32&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;FLOAT&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;DOUBLE&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;STRING&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};
 
&lt;span style=&#34;color:blue;&#34;&gt;private&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ObjectType&lt;/span&gt;&amp;nbsp;_objectType;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;union&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;*boolVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;*byteVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;int16&lt;/span&gt;&amp;nbsp;*int16Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint16&lt;/span&gt;&amp;nbsp;*uint16Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;int32&lt;/span&gt;&amp;nbsp;*int32Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;*uint32Val;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;float&lt;/span&gt;&amp;nbsp;*floatVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;double&lt;/span&gt;&amp;nbsp;*doubleVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;*stringVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;_value;
};&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;objectType&lt;/em&gt; keeps track of what type of data the object is storing and _&lt;em&gt;value&lt;/em&gt; points to the actual data. If _&lt;em&gt;value&lt;/em&gt; were instead to hold the actual data value, the union would be forced to sizeof(Common::String), which is quite large (~34 bytes), due to internal caching. Then we&amp;rsquo;re back to the argument of storing things in containers much larger than what they need. By putting the data on the heap and only storing pointers to the data, we save the wasted space, but at the CPU cost of heap allocation.&lt;/p&gt;

&lt;p&gt;Now that the data is stored, how do we get it back? My original idea was to have implicit cast operators:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;operator&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;();
&lt;span style=&#34;color:blue;&#34;&gt;operator&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;();
&lt;span style=&#34;color:blue;&#34;&gt;operator&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;int16&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/pre&gt;

&lt;p&gt;However, LordHoto, one of the GSoC mentors and ScummVM developers, brought my attention to the problems that can arise when using implicit casting. For example, a user could try to cast the data to a type that wasn&amp;rsquo;t stored in the Object and the cast would work, but the data would be completely corrupted. Also, from a user point of view, it wasn&amp;rsquo;t intuitive.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, I removed the cast operators and created accessor methods:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getBoolValue&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;*returnValue)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;;
&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getByteValue&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;*returnValue)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;;
&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getInt16Value&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;int16&lt;/span&gt;&amp;nbsp;*returnValue)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.
 
&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;Object::getBoolValue(&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;*returnValue)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(_objectType&amp;nbsp;!=&amp;nbsp;&amp;nbsp;BOOL)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;warning(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;&amp;#39;Object&amp;#39;&amp;nbsp;not&amp;nbsp;of&amp;nbsp;type&amp;nbsp;bool.&amp;quot;&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;false&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*returnValue&amp;nbsp;=&amp;nbsp;*_value.boolVal;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;true&lt;/span&gt;;
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This adds a layer of type semi-protection to the class.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, I added assigment operators to the class, but rather than making this post even longer, I&amp;rsquo;ll just link the full source &lt;a href=&#34;https://gist.github.com/RichieSams/5873413&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/RichieSams/5873397&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Advantages of &amp;lsquo;Object&amp;rsquo; class&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can store relatively &amp;lsquo;any&amp;rsquo; type of data. (Any type not currently supported could be trivially added)&lt;/li&gt;
&lt;li&gt;Only uses as much space as needed.&lt;/li&gt;
&lt;li&gt;Transforms dynamically typed data into a statically typed &amp;lsquo;box&amp;rsquo; that can be stored in arrays, linked lists, hashmaps, etc. and can be iterated upon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages of &amp;lsquo;Object&amp;rsquo; class&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adds a small memory overhead per object. ( 1 byte + sizeof(Operating System pointer) )&lt;/li&gt;
&lt;li&gt;Adds one heap memory allocation per object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So is it better than Marisa Chan&amp;rsquo;s implementation? It really depends on what you define as better. While it does save memory, only requires data to be parsed once, and, in my opinion, adds a great deal of elegance to handling the Results arguments, it does so at the cost of heap storage. Not only the cost of the initial allocation, but the cost of potential defragmentation runs. But then again, is the cost of heap storage really that big, especially since the data should have a relatively long life? (On average, the time an end user spends in a room in the game) That I don&amp;rsquo;t know, since it all depends on the memory allocator implementation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the end, I believe both methods perform well, and as such I choose the eloquence of using the &amp;lsquo;Object&amp;rsquo; class. I am very much open to your thoughts on both the class as a whole or on your take of the problem. Also, if I misspoke about something please, please, please let me know.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading and happy coding!&amp;nbsp;&amp;nbsp;&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;edit&#34;&gt;*Edit&lt;/h4&gt;

&lt;p&gt;Upon further inspection I noticed that by using Common::String I&amp;rsquo;m not only negating any memory size benefits from using &amp;lsquo;Object&amp;rsquo;, but potentially even using more memory, since Common::String has such a huge size.&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Marisa&amp;nbsp;Chan&lt;/span&gt;
&lt;span style=&#34;color:blue;&#34;&gt;char&lt;/span&gt;&amp;nbsp;arguments[25]&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;1&amp;nbsp;a00h1tc.raw&amp;nbsp;1&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;size&amp;nbsp;=&amp;nbsp;25;&lt;/span&gt;
 
&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Object:&lt;/span&gt;
&lt;span style=&#34;color:#216f85;&#34;&gt;Object&lt;/span&gt;&amp;nbsp;arg1&amp;nbsp;=&amp;nbsp;1;
&lt;span style=&#34;color:#216f85;&#34;&gt;Object&lt;/span&gt;&amp;nbsp;arg2&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;a00h1tc.raw&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color:#216f85;&#34;&gt;Object&lt;/span&gt;&amp;nbsp;arg3&amp;nbsp;=&amp;nbsp;1;
 
&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;size&amp;nbsp;=&amp;nbsp;(3&amp;nbsp;*sizeof(Object))&amp;nbsp;+&amp;nbsp;sizeof(byte)&amp;nbsp;+&amp;nbsp;sizeof(Common::String)&amp;nbsp;+&amp;nbsp;sizeof(byte);&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;size&amp;nbsp;=&amp;nbsp;15&amp;nbsp;+&amp;nbsp;1&amp;nbsp;+&amp;nbsp;34&amp;nbsp;+&amp;nbsp;1;&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;size&amp;nbsp;=&amp;nbsp;51;&lt;/span&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Scripting!!!!!!</title>
      <link>https://adrianastley.com/blog/scripting/</link>
      <pubDate>Wed, 26 Jun 2013 07:42:00 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/scripting/</guid>
      <description>

&lt;p&gt;I just realized that I forgot to do a post last week! I was being so productive, time just flew by.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Last week and the beginning of this week I&amp;rsquo;ve been working on the script management system for ZEngine. Well, before I get into that, let me go back a little further. According to my original timeline, the next milestone was creating a skeleton engine that could do basic rendering, sounds, and events. So, last Monday, I started by cleaning up the main game loop and splitting everything into separate methods and classes. With that, the run loop looks like this:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;Error&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZEngine&lt;/span&gt;::&lt;span style=&#34;color:#850000;&#34;&gt;run&lt;/span&gt;()&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;initialize&lt;/span&gt;();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Main&amp;nbsp;loop&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;currentTime&amp;nbsp;=&amp;nbsp;_system-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;getMillis&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;lastTime&amp;nbsp;=&amp;nbsp;currentTime;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;desiredFrameTime&amp;nbsp;=&amp;nbsp;33;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;~30&amp;nbsp;fps&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;while&lt;/span&gt;&amp;nbsp;(!&lt;span style=&#34;color:#850000;&#34;&gt;shouldQuit&lt;/span&gt;())&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;processEvents&lt;/span&gt;();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentTime&amp;nbsp;=&amp;nbsp;_system-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;getMillis&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;deltaTime&amp;nbsp;=&amp;nbsp;currentTime&amp;nbsp;-&amp;nbsp;lastTime;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lastTime&amp;nbsp;=&amp;nbsp;currentTime;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;updateScripts&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;updateAnimations&lt;/span&gt;(deltaTime);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(_needsScreenUpdate)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_system-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;updateScreen&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Calculate&amp;nbsp;the&amp;nbsp;frame&amp;nbsp;delay&amp;nbsp;based&amp;nbsp;off&amp;nbsp;a&amp;nbsp;desired&amp;nbsp;frame&amp;nbsp;rate&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;int&lt;/span&gt;&amp;nbsp;delay&amp;nbsp;=&amp;nbsp;desiredFrameTime&amp;nbsp;-&amp;nbsp;(currentTime&amp;nbsp;-&amp;nbsp;_system-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;getMillis&lt;/span&gt;());
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Ensure&amp;nbsp;non-negative&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delay&amp;nbsp;=&amp;nbsp;delay&amp;nbsp;&amp;lt;&amp;nbsp;0&amp;nbsp;?&amp;nbsp;0&amp;nbsp;:&amp;nbsp;delay;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_system-&amp;gt;&lt;span style=&#34;color:#850000;&#34;&gt;delayMillis&lt;/span&gt;(delay);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;kNoError&lt;/span&gt;;
}&lt;/pre&gt;

&lt;p&gt;No bad, if I do say so myself. :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That done, I started implementing the various method shells, such as processEvents(). It was about that time that I realized the the structure of the scripting system had a huge impact on the structure of the engine as a whole. For example, should the event system call methods directly, or should it just register key presses, etc. and let the script system handle the calls? I had a basic understanding of how it &lt;em&gt;probably&lt;/em&gt; worked, knowing the history of adventure games, but it was clear I needed to understand the script system before I could go any further.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The .scr files themselves are rather simple; they&amp;rsquo;re text-based if-then statements. Here&amp;rsquo;s an example of a puzzle and a control:
&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;
puzzle:5251 {
    criteria {
        [4188] = 1
        [4209] ! 5
        [7347] = 1
        [67] = 0
    }
    criteria {
        [4209] &amp;gt; 1
        [7347] = 1
        [67] = 1
        [4188] = [6584]
    }
    results {
        action:assign(5985, 0)
        background:timer:7336(60)
        event:change_location(C,B,C0,1073)
        background:music:5252(1 a000h1tc.raw 1)
    }
    flags {
        ONCE_PER_INST
    }
}&lt;/p&gt;

&lt;p&gt;control:8454 push_toggle {
    flat_hotspot(0,265,511,54)
    cursor(backward)
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;puzzles&#34;&gt;Puzzles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Criteria are a set of comparisons. If ANY of the criteria are satisfied, the results are called.&lt;/li&gt;
&lt;li&gt;The number in square brackets is the key in a &amp;lsquo;global&amp;rsquo; variable hashmap. (The hashmap isn&amp;rsquo;t actually global in my implementation but rather a member variable in the ScriptManager class)&lt;/li&gt;
&lt;li&gt;Next is a simplified form of the standard comparison operators ( ==, !=, &amp;lt;, &amp;gt; ).&lt;/li&gt;
&lt;li&gt;The last number can either be a constant or a key to another global variable.*   Results are what happens when one of the criteria is met. The first part defines a function, and the remaining parts are the arguments.&lt;/li&gt;
&lt;li&gt;I haven&amp;rsquo;t fully figured out flags, but from what I can see it&amp;rsquo;s a bitwise OR of when results can be called. For example, only once per room.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For those of you that understand code better than words:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;criteriaOne,&amp;nbsp;criteriaTwo;
 
&lt;span style=&#34;color:blue;&#34;&gt;if&lt;/span&gt;&amp;nbsp;(criteriaOne&amp;nbsp;||&amp;nbsp;criteriaTwo)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;assign&lt;/span&gt;(5985,&amp;nbsp;0);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;timer&lt;/span&gt;(7336,&amp;nbsp;60);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;change_location&lt;/span&gt;(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;,&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;C0&amp;quot;&lt;/span&gt;,&amp;nbsp;1073);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;music&lt;/span&gt;(5252,&amp;nbsp;1,&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;a000h1tc.raw&amp;quot;&lt;/span&gt;,&amp;nbsp;1);
}&lt;/pre&gt;

&lt;h3 id=&#34;controls&#34;&gt;Controls&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I haven&amp;rsquo;t done much work on controls yet, but from what I have done, they look to be similar to results and are just called whenever interacted with. For example, a lever being toggled.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;The majority of the week was spent working on the best way to store this information so all the conditions could be readily tested and actions fired. The best way I&amp;rsquo;ve come up with so far, is to have a Criteria struct and a Results struct as follows:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:green;&#34;&gt;/**&amp;nbsp;Criteria&amp;nbsp;for&amp;nbsp;a&amp;nbsp;Puzzle&amp;nbsp;result&amp;nbsp;to&amp;nbsp;be&amp;nbsp;fired&amp;nbsp;*/&lt;/span&gt;
&lt;span style=&#34;color:blue;&#34;&gt;struct&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Criteria&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&amp;nbsp;The&amp;nbsp;id&amp;nbsp;of&amp;nbsp;a&amp;nbsp;global&amp;nbsp;state&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;id;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;What&amp;nbsp;we&amp;#39;re&amp;nbsp;comparing&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;global&amp;nbsp;state&amp;nbsp;against&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;This&amp;nbsp;can&amp;nbsp;either&amp;nbsp;be&amp;nbsp;a&amp;nbsp;pure&amp;nbsp;value&amp;nbsp;or&amp;nbsp;it&amp;nbsp;can&amp;nbsp;be&amp;nbsp;the&amp;nbsp;id&amp;nbsp;of&amp;nbsp;another&amp;nbsp;global&amp;nbsp;state&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;argument;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&amp;nbsp;How&amp;nbsp;to&amp;nbsp;do&amp;nbsp;the&amp;nbsp;comparison&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;CriteriaOperator&lt;/span&gt;&amp;nbsp;criteriaOperator;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&amp;nbsp;Is&amp;nbsp;&amp;#39;argument&amp;#39;&amp;nbsp;the&amp;nbsp;id&amp;nbsp;of&amp;nbsp;a&amp;nbsp;global&amp;nbsp;state&amp;nbsp;or&amp;nbsp;a&amp;nbsp;pure&amp;nbsp;value&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;argumentIsAnId;
};
 
&lt;span style=&#34;color:green;&#34;&gt;/**&amp;nbsp;What&amp;nbsp;happens&amp;nbsp;when&amp;nbsp;Puzzle&amp;nbsp;criteria&amp;nbsp;are&amp;nbsp;met&amp;nbsp;*/&lt;/span&gt;
&lt;span style=&#34;color:blue;&#34;&gt;struct&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Result&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ResultAction&lt;/span&gt;&amp;nbsp;action;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Object&lt;/span&gt;&amp;gt;&amp;nbsp;arguments;
};&lt;/pre&gt;

&lt;p&gt;CriteriaOperator is an enum of the operators and ResultAction is an enum of all the possible actions. The other variables are pretty self explanatory.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Using the Criteria and Result structs, the Puzzle struct is:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;struct&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Puzzle&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;id;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Criteria&lt;/span&gt;&amp;gt;&amp;nbsp;criteriaList;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#216f85;&#34;&gt;Result&lt;/span&gt;&amp;gt;&amp;nbsp;resultList;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;flags;
};&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thus, the process is: read a script file, parse the puzzles into structs and load the structs into a linked list representing all the currently active puzzles. Elegant and exceedingly fast to iterate for criteria comparison checking. Now, some of you may have noticed the &amp;lsquo;Object&amp;rsquo; class and are probably thinking to yourselves, &amp;ldquo;I thought this was c++, not c# or &amp;lt;insert terrible coffee-named language here&amp;gt;.&amp;rdquo; It is, but that is a whole post to itself, which I will be writing after this one.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So, a couple hundred words in, what have I said? Well, over this past week I discovered how the script system determines what events to fire. This has helped me not only to design the script system code, but also has given me insight into how to design the other systems in the engine. For example, I now know that mouse and keyboard events will just translate to setting global state variables.&lt;/p&gt;

&lt;h3 id=&#34;what-i-have-left-to-do-in-the-scriptmanager&#34;&gt;What I have left to do in the ScriptManager&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Figure out what CriteriaFlags are used for&lt;/li&gt;
&lt;li&gt;Create shell methods for all the Result &amp;lsquo;actions&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Write the parser and storage for control and figure out how they are called&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well that&amp;rsquo;s about it for this post, so until next time,&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!&amp;nbsp;&amp;nbsp;&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZFS File Format</title>
      <link>https://adrianastley.com/blog/zfs_file_format/</link>
      <pubDate>Wed, 12 Jun 2013 10:59:00 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/zfs_file_format/</guid>
      <description>

&lt;p&gt;Over the years I&amp;rsquo;ve reverse engineered quite a few file formats, but I&amp;rsquo;ve never really sat down and picked apart why a format was designed the way it was. With that said, I wanted to show the ZFS archive file format and highlight some of the peculiarities I saw and perhaps you guys can answer some of my questions.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;For some context, Z-engine was created around 1995 and was used on Macintosh, MS-DOS, and Windows 95.&lt;/p&gt;

&lt;h2 id=&#34;format&#34;&gt;Format&lt;/h2&gt;

&lt;p&gt;The main file header is defined as:
&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;struct&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZfsHeader&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;magic;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;unknown1;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;maxNameLength;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;filesPerBlock;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;fileCount;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;byte&lt;/span&gt;&amp;nbsp;xorKey[4];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;uint32&lt;/span&gt;&amp;nbsp;fileSectionOffset;
};&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name is the file name right-padded with null characters&lt;/li&gt;
&lt;li&gt;offset is the offset to the actual file data&lt;/li&gt;
&lt;li&gt;id is a the numeric id of the file. The id&amp;rsquo;s increment from 0 to fileCount&lt;/li&gt;
&lt;li&gt;size is the length of the file&lt;/li&gt;
&lt;li&gt;unknown is self explanatory&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
[Main Header]
 
[uint32 offsetToPage2]
[Page 1 File Entry Headers]
[Page 1 File Data]
 
[uint32 offsetToPage3]
[Page 2 File Entry Headers]
[Page 2 File Data]
 
etc.
&lt;/pre&gt;

&lt;h2 id=&#34;questions-and-observations&#34;&gt;Questions and Observations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;maxNameLength&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why have a fixed size name block vs. null terminated or [size][string]? Was that just the popular thing to do back then so the entire header to could be cast directly to a struct?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;filesPerBlock&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is the benefit to pagination? The only explanation I can see atm is that it was some artifact of their asset compiler max memory. Maybe I&amp;rsquo;m missing something since I&amp;rsquo;ve never programmed for that type of hardware.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fileSectionOffset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen things like this a lot in my reverse engineering; they give the offset to a section that&amp;rsquo;s literally just after the header. Even if they were doing straight casting instead of incremental reading, a simple sizeof(mainHeader) would give them the offset to the next section. Again, if I&amp;rsquo;m missing something, please let me know.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!&amp;nbsp;&amp;nbsp;&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git is hard, but ScummVM Common is Awesome</title>
      <link>https://adrianastley.com/blog/git_is_hard_but_scummvm_common_is_awesome/</link>
      <pubDate>Wed, 12 Jun 2013 08:04:00 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/git_is_hard_but_scummvm_common_is_awesome/</guid>
      <description>&lt;p&gt;This week I started working on Z-engine proper&amp;hellip; And immediately ran face-first into the complexity of git. Well, let me restate that. Git isn&amp;rsquo;t hard, per-se, but has so many features and facets that it can very easily go over your head. Anybody with a brain can mindlessly commit and push things to a git repo. However, if you really want structured and concise commit flow, it takes not only knowing the tools, but actually sitting back and thinking about what changes should be put in what commits and which branches.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;So that said, I&amp;rsquo;ll go over the things I really like about git or just distributed source control in general.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Branchy development is absolutely a must. It&amp;rsquo;s really really helpful to separate different parts of a project or even different parts of the same section of a project. It makes identifying and diff-ing changes really easy. Also, I found it&amp;rsquo;s really helpful to have a local &amp;ldquo;work-in-progess&amp;rdquo; version of the branch I&amp;rsquo;m working on. That allows me to commit really often and not really have to worry about commit message formatting or general structure. Then when I&amp;rsquo;m ready to do a push to the repo, I rebase my commits in my WIP branch to fit all my needs, then rebase them to the main branch before pushing.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;On that note, rebase is AMAZING!!! It&amp;rsquo;s like the &amp;ldquo;Jesus&amp;rdquo; answer in Sunday school, or &amp;ldquo;Hydrogen bonding&amp;rdquo; in chemistry class. However, &amp;ldquo;With great power comes great responsibility&amp;rdquo;. So I try my hardest to only use rebase on my local repo.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;On to details about Z-engine work!!&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;My first milestone for Z-engine was to get a file manager fully working, seeing how pretty much every other part of the engine relies on files. When I was writing my proposal for GSoC, I thought I was going to have to write my own file manager, but Common::SearchManager to the rescue!&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;By default, the SearchManager will register every file within the game&amp;rsquo;s directory. So any calls to
&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;File&lt;/span&gt;.open(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;filePath);&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;will search the game&amp;rsquo;s directory for the filePath and open that file if found.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Well that was easy. Done before lunch&amp;hellip;. Well, not quite. Z-engine games store their script files in archive files. The format is really really simple, but I&amp;rsquo;ll save that for a post of itself. Ideally, I wanted to be able to do:
&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;File&lt;/span&gt;.open(&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;fileInsideArchive.scr&amp;quot;&lt;/span&gt;);&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;After some searching and asking about irc, I found that I can do exactly that by implementing &lt;span style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;Archive&lt;/span&gt;&lt;/span&gt;:
&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:blue;&#34;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZfsArchive&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;Archive&lt;/span&gt;&amp;nbsp;{
&lt;span style=&#34;color:blue;&#34;&gt;public&lt;/span&gt;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;ZfsArchive&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;&amp;amp;fileName);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;ZfsArchive&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;&amp;amp;fileName,&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;SeekableReadStream&lt;/span&gt;&amp;nbsp;*stream);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#850000;&#34;&gt;ZfsArchive&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Check&amp;nbsp;if&amp;nbsp;a&amp;nbsp;member&amp;nbsp;with&amp;nbsp;the&amp;nbsp;given&amp;nbsp;name&amp;nbsp;is&amp;nbsp;present&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Archive.&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Patterns&amp;nbsp;are&amp;nbsp;not&amp;nbsp;allowed,&amp;nbsp;as&amp;nbsp;this&amp;nbsp;is&amp;nbsp;meant&amp;nbsp;to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;quick&amp;nbsp;File::exists()&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;replacement.&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;hasFile&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;&amp;amp;fileName)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Add&amp;nbsp;all&amp;nbsp;members&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Archive&amp;nbsp;to&amp;nbsp;list.&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Must&amp;nbsp;only&amp;nbsp;append&amp;nbsp;to&amp;nbsp;list,&amp;nbsp;and&amp;nbsp;not&amp;nbsp;remove&amp;nbsp;elements&amp;nbsp;from&amp;nbsp;it.&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@return&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;names&amp;nbsp;added&amp;nbsp;to&amp;nbsp;list&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;listMembers&lt;/span&gt;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;ArchiveMemberList&lt;/span&gt;&amp;nbsp;&amp;amp;list)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Returns&amp;nbsp;a&amp;nbsp;ArchiveMember&amp;nbsp;representation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;given&amp;nbsp;file.&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;ArchiveMemberPtr&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#850000;&#34;&gt;getMember&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;&amp;amp;name)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:green;&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Create&amp;nbsp;a&amp;nbsp;stream&amp;nbsp;bound&amp;nbsp;to&amp;nbsp;a&amp;nbsp;member&amp;nbsp;with&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;name&amp;nbsp;in&amp;nbsp;the&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;archive.&amp;nbsp;If&amp;nbsp;no&amp;nbsp;member&amp;nbsp;with&amp;nbsp;this&amp;nbsp;name&amp;nbsp;exists,&amp;nbsp;0&amp;nbsp;is&amp;nbsp;returned.&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@return&amp;nbsp;the&amp;nbsp;newly&amp;nbsp;created&amp;nbsp;input&amp;nbsp;stream&lt;/span&gt;
&lt;span style=&#34;color:green;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;SeekableReadStream&lt;/span&gt;&amp;nbsp;*&lt;span style=&#34;color:#850000;&#34;&gt;createReadStreamForMember&lt;/span&gt;(&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;&amp;amp;name)&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;const&lt;/span&gt;;
}&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;and then registering each archive with the SearchManager like so:&lt;/p&gt;

&lt;pre style=&#34;font-family:Consolas;font-size:13;color:black;&#34;&gt;&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Search&amp;nbsp;for&amp;nbsp;.zfs&amp;nbsp;archive&amp;nbsp;files&lt;/span&gt;
&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;ArchiveMemberList&lt;/span&gt;&amp;nbsp;list;
&lt;span style=&#34;color:#6f008a;&#34;&gt;SearchMan&lt;/span&gt;.&lt;span style=&#34;color:#850000;&#34;&gt;listMatchingMembers&lt;/span&gt;(list,&amp;nbsp;&lt;span style=&#34;color:#a31515;&#34;&gt;&amp;quot;*.zfs&amp;quot;&lt;/span&gt;);
 
&lt;span style=&#34;color:green;&#34;&gt;//&amp;nbsp;Register&amp;nbsp;the&amp;nbsp;files&amp;nbsp;within&amp;nbsp;the&amp;nbsp;zfs&amp;nbsp;archive&amp;nbsp;files&amp;nbsp;with&amp;nbsp;the&amp;nbsp;SearchMan&lt;/span&gt;
&lt;span style=&#34;color:blue;&#34;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;ArchiveMemberList&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;iterator&lt;/span&gt;&amp;nbsp;iter&amp;nbsp;=&amp;nbsp;list.&lt;span style=&#34;color:#850000;&#34;&gt;begin&lt;/span&gt;();&amp;nbsp;iter&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;!=&lt;/span&gt;&amp;nbsp;list.&lt;span style=&#34;color:#850000;&#34;&gt;end&lt;/span&gt;();&amp;nbsp;&lt;span style=&#34;color:teal;&#34;&gt;++&lt;/span&gt;iter)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;Common&lt;/span&gt;::&lt;span style=&#34;color:#216f85;&#34;&gt;String&lt;/span&gt;&amp;nbsp;name&amp;nbsp;=&amp;nbsp;(&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;iter)&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#850000;&#34;&gt;getName&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZfsArchive&lt;/span&gt;&amp;nbsp;*archive&amp;nbsp;=&amp;nbsp;&lt;span style=&#34;color:blue;&#34;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&#34;color:#216f85;&#34;&gt;ZfsArchive&lt;/span&gt;(name,&amp;nbsp;(&lt;span style=&#34;color:teal;&#34;&gt;*&lt;/span&gt;iter)&lt;span style=&#34;color:teal;&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#850000;&#34;&gt;createReadStream&lt;/span&gt;());
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#6f008a;&#34;&gt;SearchMan&lt;/span&gt;.&lt;span style=&#34;color:#850000;&#34;&gt;add&lt;/span&gt;(name,&amp;nbsp;archive);
}&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In summary, git can be complicated, but it has a wealth of potential and is extremely powereful. Also, the ScummVM Common classes are absolutely fantastic and make the lives of engine developers sooooo much easier. A toast to the wonderful people who developed them. Well, that&amp;rsquo;s all for now.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!&amp;nbsp;&amp;nbsp;&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Obligatory &#34;Hello World&#34;</title>
      <link>https://adrianastley.com/blog/obligatory_hello_world/</link>
      <pubDate>Fri, 31 May 2013 12:41:07 -0500</pubDate>
      
      <guid>https://adrianastley.com/blog/obligatory_hello_world/</guid>
      <description>&lt;p&gt;Hello world!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Welcome to my new blog. This will be the place I share the coding experiences have and learn while working on my various projects. With that said, who am I and what am I working on?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a 21 year old, fourth year student studying at The University of Texas at Austin. I&amp;rsquo;m majoring in Mechanical Engineering with a minor in Computer Science. I thoroughly enjoy programming, both the thrill of gettting something to work and the science/math of algorithms and data structures. The majority of my programming projects have revolved around games. The first major project I did was creating an application that tracked guild currency for my guild. My latest project is a suite of tools to let users install, modify, and create game asset modifications of the game League of Legends. It required reverse engineering quite a few file formats and learning how to hook the game process in order to allow run-time asset swapping.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The two big projects I&amp;rsquo;m working on right now are The Dargon Project and Z-engine for ScummVM. The Dargon Project is the aforementioned suite of applications. Z-engine is my project for Google Summer of Code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Z-engine:
The Z-Engine is used in the games Zork Nemesis and Zork Grand Inquisitor. Marisa Chan created a C implementation of the engine, but it is only for desktop and requires configuration files. The project aims to create a ScummVM engine using Marisa Chan’s implementation code as a guide into the Zork file structure and engine design. That is, it will not simply adapt the current implementation to the ScummVM engine structure. Rather, it will create a new engine, using the file structures and event implementations in Marisa Chan’s code as a reference. ScummVM will allow these games to be played on a variety of platforms and a redesign will remove the need for configuration files. Lastly, it will mean that ScummVM will support all of the Zork point&amp;rsquo;n&amp;rsquo;click adventure games.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m absolutely thrilled be one of the lucky people to be a part of Google Summer of Code. ScummVM is an amazing group of developers and I&amp;rsquo;m really looking forward to being a part of that.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Well, I guess that&amp;rsquo;s it for now. My next post will most likely be about that start of GSoC.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!&amp;nbsp;&amp;nbsp;&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrianastley.com/resume/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrianastley.com/resume/placeholder/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>